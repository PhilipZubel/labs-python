import unittest
from unittest.mock import MagicMock, patch
from typing import Dict

class OsBucket:
    def __init__(self, osSecret, bucket, userKey, osEndpoint, osCert, osSrcDir):
        pass
    
    def UploadFile(self, local_path, server_path):
        pass

class FeedArchival:
    def __init__(self, feed: Dict, param_dict: Dict, transfer_type: str):
        self.feed = feed
        self.transfer_type = transfer_type
        self.os_bucket = self._initialize_object_store(param_dict)
    
    def _initialize_object_store(self, param_dict):
        bucket_credentials = {
            "osSecret": param_dict[self.feed['ObjStore']['Secret']],
            "bucket": param_dict[self.feed['ObjStore']['Bucket']],
            "userKey": param_dict[self.feed['ObjStore']['Storekey']],
            "osEndpoint": param_dict[self.feed['ObjStore']['Endpoint']],
            "osCert": param_dict[self.feed['ObjStore']['Cert']],
            "osSrcDir": param_dict[self.feed['ObjStore']['SrcDir']]
        }
        return OsBucket(**bucket_credentials)
    
    def download(self):
        if self.transfer_type != 'download':
            raise Exception("Transfer type needs to be set to 'download' to download files from the object store.")
        files_to_download = self._fetch_latest_files_from_obj_store()
        file_paths_local_downloaded = self._download_files(files_to_download)
        return file_paths_local_downloaded
    
    def upload(self, local_server_file_paths_mapping: Dict[str, str]):
        if self.transfer_type != 'upload':
            raise Exception("Transfer type needs to be set to 'upload' to upload files to the object store.")
        for file_path_local, file_path_server in local_server_file_paths_mapping.items():
            self.os_bucket.UploadFile(file_path_local, file_path_server)

    def _fetch_latest_files_from_obj_store(self):
        # Dummy implementation for testing
        return []

    def _download_files(self, files):
        # Dummy implementation for testing
        return []

class TestFeedArchival(unittest.TestCase):
    def setUp(self):
        self.feed = {
            'ObjStore': {
                'Secret': 'secret_key',
                'Bucket': 'bucket_name',
                'Storekey': 'store_key',
                'Endpoint': 'endpoint',
                'Cert': 'cert',
                'SrcDir': 'src_dir'
            }
        }
        self.param_dict = {
            'secret_key': 'test_secret',
            'bucket_name': 'test_bucket',
            'store_key': 'test_store_key',
            'endpoint': 'test_endpoint',
            'cert': 'test_cert',
            'src_dir': 'test_src_dir'
        }
        self.download_transfer_type = 'download'
        self.upload_transfer_type = 'upload'

    @patch.object(FeedArchival, '_initialize_object_store')
    def test_initialization(self, mock_initialize_object_store):
        mock_initialize_object_store.return_value = MagicMock()
        archival = FeedArchival(self.feed, self.param_dict, self.download_transfer_type)
        self.assertEqual(archival.feed, self.feed)
        self.assertEqual(archival.transfer_type, self.download_transfer_type)
        mock_initialize_object_store.assert_called_once_with(self.param_dict)

    def test_download_wrong_transfer_type(self):
        archival = FeedArchival(self.feed, self.param_dict, self.upload_transfer_type)
        with self.assertRaises(Exception) as context:
            archival.download()
        self.assertEqual(str(context.exception), "Transfer type needs to be set to 'download' to download files from the object store.")

    def test_upload_wrong_transfer_type(self):
        archival = FeedArchival(self.feed, self.param_dict, self.download_transfer_type)
        with self.assertRaises(Exception) as context:
            archival.upload({})
        self.assertEqual(str(context.exception), "Transfer type needs to be set to 'upload' to upload files to the object store.")

    @patch.object(FeedArchival, '_fetch_latest_files_from_obj_store')
    @patch.object(FeedArchival, '_download_files')
    def test_download(self, mock_download_files, mock_fetch_latest_files):
        archival = FeedArchival(self.feed, self.param_dict, self.download_transfer_type)
        mock_fetch_latest_files.return_value = ['file1', 'file2']
        mock_download_files.return_value = ['local_file1', 'local_file2']

        result = archival.download()

        self.assertEqual(result, ['local_file1', 'local_file2'])
        mock_fetch_latest_files.assert_called_once()
        mock_download_files.assert_called_once_with(['file1', 'file2'])

    @patch.object(OsBucket, 'UploadFile')
    @patch.object(FeedArchival, '_initialize_object_store')
    def test_upload(self, mock_initialize_object_store, mock_upload_file):
        mock_initialize_object_store.return_value = MagicMock()
        archival = FeedArchival(self.feed, self.param_dict, self.upload_transfer_type)
        local_server_file_paths_mapping = {'local_path1': 'server_path1', 'local_path2': 'server_path2'}

        archival.upload(local_server_file_paths_mapping)

        mock_upload_file.assert_any_call('local_path1', 'server_path1')
        mock_upload_file.assert_any_call('local_path2', 'server_path2')
        self.assertEqual(mock_upload_file.call_count, 2)

if __name__ == '__main__':
    unittest.main()
