Exercise 1: Bagpipe Expressions
Story Prompt:
Hamish wants to set the mood with a simple bagpipe tune. Help him express the melody using Python expressions.

# Exercise 1: Bagpipe Expressions
# Hamish's bagpipe melody expressed in Python

# Define a variable for the tempo (beats per minute)
melody_speed = 120

# Define a variable for the total number of notes
melody_notes = 16

# Calculate the duration of each note
note_duration = 60 / melody_speed

# Calculate the total time taken to play the entire melody
total_time = note_duration * melody_notes

total_time  # Display the total time in seconds


Exercise 2: Bagpipe Variables
Story Prompt:
While playing his bagpipes, Hamish realized he needed to keep track of the notes he played. Help him use Python variables to store and manipulate this information.

# Exercise 2: Bagpipe Variables
# Hamish's bagpipe notes

# Define variables for each note
note1 = 'G'
note2 = 'A'
note3 = 'B'
note4 = 'D'

# Combine the notes into a melody string
melody_string = note1 + note2 + note3 + note4

# Display the complete melody
melody_string

Exercise 3: Bagpipe Statements
Story Prompt:
Hamish encountered a challenge: he wanted to repeat a specific note in his melody. Guide him through the use of Python statements to achieve this repetition.

# Exercise 2: Bagpipe Variables
# Hamish's bagpipe notes

# Define variables for each note
note1 = 'G'
note2 = 'A'
note3 = 'B'
note4 = 'D'

# Combine the notes into a melody string
melody_string = note1 + note2 + note3 + note4

# Display the complete melody
melody_string


Exercise 4: Bagpipe Types
Story Prompt:
While sharing his bagpipe journey with a friend, Hamish realized the importance of specifying the type of his musical elements. Help him understand Python types.

# Exercise 4: Bagpipe Types
# Hamish categorizes his musical elements

# Determine the type of the tempo variable
tempo_type = type(120)

# Determine the type of the note variable
note_type = type('G')

# Display the types of musical elements
(tempo_type, note_type)


Exercise 5: Bagpipe Challenge - Conditional Statements
Story Prompt:
As Hamish explores advanced bagpipe melodies, he wants to add a special note, 'High C', but only if the tempo is greater than 150. Guide him in using conditional statements to achieve this.

# Exercise 5: Bagpipe Challenge - Conditional Statements
# Hamish wants to add a special note 'High C' under certain conditions

# Given tempo and special note
tempo = 160
special_note = 'High C'

# Use a conditional statement to check if the tempo is greater than 150
# If true, add the special note to the melody, otherwise use a default note 'E'
if tempo > 150:
    melody_with_special_note = ' '.join([note1, note2, note3, special_note])
else:
    melody_with_special_note = ' '.join([note1, note2, note3, 'E'])

melody_with_special_note

Exercise 6: Bagpipe Challenge - Functions and Lists
Story Prompt:
Hamish realizes that his bagpipe melodies are becoming complex. He wants to create a function that takes a list of notes and returns the melody string. Guide him in defining and using a function for this purpose.

# Exercise 6: Bagpipe Challenge - Functions and Lists
# Hamish wants to create a function for generating melodies from a list of notes

# Define a function 'generate_melody' that takes a list of notes and returns the melody string
def generate_melody(notes):
    return ' '.join(notes)

# Create a list of notes
melody_notes_list = ['G', 'A', 'B', 'D', 'C', 'E', 'F']

# Use the function to generate the melody string
generated_melody = generate_melody(melody_notes_list)

generated_melody
